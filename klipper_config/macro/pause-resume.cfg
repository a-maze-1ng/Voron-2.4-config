[pause_resume]

[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
gcode:
	# Parameters
	{% set z = params.Z|default(10)|int %}														; z hop amount
	
	{% if printer['pause_resume'].is_paused|int == 0 %}	 
		SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}									; set z hop variable for reference in resume macro
		SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}		; set hotend temp variable for reference in resume macro
								
		SET_FILAMENT_SENSOR SENSOR=btt_sensor ENABLE=0											; disable filament sensor
		SAVE_GCODE_STATE NAME=PAUSE														  ; save current print position for resume				
		BASE_PAUSE																		   ; pause print
		{% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}	   ; check that zhop doesn't exceed z max
			G91																			  ; relative positioning
			G1 Z{z} F900																	 ; raise Z up by z hop amount
		{% else %}
			{ action_respond_info("Pause zhop exceeds maximum Z height.") }				  ; if z max is exceeded, show message and set zhop value for resume to 0
			SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
		{% endif %}
		G90																				  ; absolute positioning
		G1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} F6000   ; park toolhead at front center
		SAVE_GCODE_STATE NAME=PAUSEPARK													  ; save parked position in case toolhead is moved during the pause (otherwise the return zhop can error) 
		M104 S0																			  ; turn off hotend
        M106 S0	                                                                          ;Turn off fan
		SET_IDLE_TIMEOUT TIMEOUT=43200													  ; set timeout to 12 hours
	{% endif %}

[gcode_macro RESUME]
rename_existing: BASE_RESUME
variable_zhop: 0
variable_etemp: 0
gcode:
	# Parameters
	{% set e = params.E|default(2.5)|int %}												; hotend prime amount (in mm)
	{% if printer['pause_resume'].is_paused|int == 1 %}
		#SET_FILAMENT_SENSOR SENSOR=btt_sensor ENABLE=1									; enable filament sensor
        #RESETRGB																		; reset LCD color
		SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}		; set timeout back to configured value
		{% if etemp > 0 %}
			M109 S{etemp|int}															; wait for hotend to heat back up
		{% endif %}
		RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100						; go back to parked position in case toolhead was moved during pause (otherwise the return zhop can error)  
		G91																				; relative positioning
		M83																				; relative extruder positioning
		{% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}
			G1 Z{zhop * -1} E{e} F900													; prime nozzle by E, lower Z back down
		{% else %}
			G1 Z{zhop * -1} F900														; lower Z back down without priming (just in case we are testing the macro with cold hotend)
		{% endif %}							 
        RAISE_FAN_TO_MAXIMUM                                                            ;slowly raise part cooling fan to maximum
        RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=60								; restore position
		SET_FILAMENT_SENSOR SENSOR=btt_sensor ENABLE=1									; enable filament sensor
        BASE_RESUME																		; resume print
	{% endif %}

[gcode_macro RAISE_FAN_TO_MAXIMUM]
gcode:
  M106 S51	;Fan at 20%
  G4 P25000	;Wait for 25s
  M106 S102	;Fan at 40%
  G4 P25000	;Wait for 25s
  M106 S153	;Fan at 60%
  G4 P25000	;Wait for 25s
  M106 S204	;Fan at 80%
  G4 P25000	;Wait for 25s
  M106 S255	;Fan at 100%

[gcode_macro RAPID_COOLDOWN]
gcode:
  RESPOND MSG="RAPID_COOLDOWN started"    
  M106 S255	;part-cooling fan at 100%
  M109 S48 ;Wait for Hotend to reach 50C
  M106 S0 ;Turn off part-cooling fan
  TURN_OFF_HEATERS
  RESPOND MSG="RAPID_COOLDOWN finished"